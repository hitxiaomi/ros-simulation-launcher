AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ROS CICD Pipeline
Globals:
  Function:
    Timeout: 3
Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.168.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the first Availability Zone
    Type: String
    Default: 10.168.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the second Availability Zone
    Type: String
    Default: 10.168.11.0/24
  ScenarioDefinitionDocument:
    Description: Please enter the filename for the scenario definition document used
      to define scenarios to launch.
    Type: String
    Default: scenarios.json
Resources:
  RobotApplication:
    Type: AWS::RoboMaker::RobotApplication
    Properties:
      Sources:
      - S3Bucket:
          Ref: S3Bucket
        S3Key: bundles/x86/robotApp.tar
        Architecture: X86_64
      RobotSoftwareSuite:
        Name: ROS
        Version: Kinetic
      Tags:
        Name: RobotApplication
        Type: CICD_Auto_Generate
  SimulationApplication:
    Type: AWS::RoboMaker::SimulationApplication
    Properties:
      Sources:
      - S3Bucket:
          Ref: S3Bucket
        S3Key: bundles/x86/simulationApp.tar
        Architecture: X86_64
      RobotSoftwareSuite:
        Name: ROS
        Version: Kinetic
      SimulationSoftwareSuite:
        Name: Gazebo
        Version: '7'
      RenderingEngine:
        Name: OGRE
        Version: 1.x
      Tags:
        Name: SimulationApplication
        Type: CICD_Auto_Generate
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} ${AWS::Region} Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} ${AWS::Region} Public Subnet (AZ2)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} ${AWS::Region} Public Routes
  RoboMakerSimulationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: robomaker-simulation-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - robomaker.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      - arn:aws:iam::aws:policy/AWSRoboMakerFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess
      - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
  StepFunctionsLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - states.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName:
        Fn::Sub: step-functions-role-${AWS::Region}
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      - arn:aws:iam::aws:policy/AWSRoboMakerFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AWSLambdaFullAccess
      - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
  RoboMakerDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: robomaker-deployment-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - iot.amazonaws.com
            - greengrass.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess
      - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      - arn:aws:iam::aws:policy/AWSRoboMakerFullAccess
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  S3Bucket:
    Type: AWS::S3::Bucket
  ProcessInputFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-dw0bv51s22xv/8dc73176112cee72f2c211ca16075997
      Handler: app.lambda_handler
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - StepFunctionsLambda
        - Arn
      Tracing: Active
      Environment:
        Variables:
          S3_BUCKET:
            Ref: S3Bucket
          ROBOT_APP_ARN:
            Ref: RobotApplication
          SIMULATION_APP_ARN:
            Ref: SimulationApplication
          IAM_ROLE:
            Fn::GetAtt:
            - RoboMakerSimulationRole
            - Arn
          SUBNET_1:
            Ref: PublicSubnet1
          SUBNET_2:
            Ref: PublicSubnet2
          SECURITY_GROUP:
            Fn::GetAtt:
            - VPC
            - DefaultSecurityGroup
  CheckStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-dw0bv51s22xv/5e7566f41e5bc2e3764de7a72ca5f7f2
      Handler: app.lambda_handler
      Runtime: python3.8
      Tracing: Active
      Role:
        Fn::GetAtt:
        - StepFunctionsLambda
        - Arn
  LaunchSimulationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-dw0bv51s22xv/ac26d1015dffff4904bb1d907add7fab
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 60
      Tracing: Active
      Role:
        Fn::GetAtt:
        - StepFunctionsLambda
        - Arn
  SendSimSummaryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-dw0bv51s22xv/599f5acb9fc0674cad2c001b2efd2b1e
      Handler: app.lambda_handler
      Runtime: python3.8
      Tracing: Active
      Role:
        Fn::GetAtt:
        - StepFunctionsLambda
        - Arn
  ErrorLaunchingSimulationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-dw0bv51s22xv/a46927971134902bb2c1abd49c48bddf
      Handler: app.lambda_handler
      Runtime: python3.8
      Tracing: Active
      Role:
        Fn::GetAtt:
        - StepFunctionsLambda
        - Arn
  TriggerStepFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-dw0bv51s22xv/7c8fdb19cc95409b9e7e642f1e15b3ac
      Handler: app.lambda_handler
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - StepFunctionsLambda
        - Arn
      Tracing: Active
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Ref: SimulationRunnerStepFunction
          SCENARIO_DEFINITIONS_FILENAME:
            Ref: ScenarioDefinitionDocument
  SimulationRunnerStepFunction:
    Type: AWS::StepFunctions::StateMachine
    DependsOn:
    - LaunchSimulationFunction
    - SendSimSummaryFunction
    - CheckStatusFunction
    - ProcessInputFunction
    Properties:
      DefinitionString:
        Fn::Sub: "{\n   \"StartAt\": \"ProcessInput\",\n       \"States\": {\n   \
          \      \"ProcessInput\": {\n           \"Type\": \"Task\",\n           \"\
          Resource\": \"${ProcessInputFunction.Arn}\",\n           \"Next\": \"CheckInput\"\
          ,\n           \"Catch\": [ {\n             \"ErrorEquals\": [\"States.ALL\"\
          ],\n             \"Next\": \"ErrorLaunchingSimulations\",\n            \
          \ \"ResultPath\": \"$.error\"\n            } ]\n         },\n         \"\
          CheckInput\": {\n           \"Type\": \"Choice\",\n           \"Choices\"\
          : [\n             {\n               \"Variable\": \"$.isValid\",\n     \
          \          \"BooleanEquals\":true,\n               \"Next\": \"LaunchSimulationRunner\"\
          \n             }\n           ],\n           \"Default\": \"ErrorLaunchingSimulations\"\
          \n         },\n         \"LaunchSimulationRunner\": {\n           \"Type\"\
          : \"Map\",\n           \"InputPath\": \"$\",\n           \"ItemsPath\":\
          \ \"$.jobs\",\n           \"MaxConcurrency\": 5,\n           \"Iterator\"\
          : {\n             \"StartAt\": \"LaunchSimulation\",\n             \"States\"\
          : {\n               \"LaunchSimulation\": {\n                 \"Type\":\
          \ \"Task\",\n                 \"Resource\": \"${LaunchSimulationFunction.Arn}\"\
          ,\n                 \"Retry\": [\n                   {\n               \
          \      \"ErrorEquals\": [\n                       \"TimeOut\"\n        \
          \             ],\n                     \"IntervalSeconds\": 1,\n       \
          \              \"BackoffRate\": 2,\n                     \"MaxAttempts\"\
          : 2\n                   }\n                 ],\n                 \"Next\"\
          : \"CheckStatus\"\n               },\n               \"CheckStatus\": {\n\
          \                 \"Type\": \"Task\",\n                 \"Resource\": \"\
          ${CheckStatusFunction.Arn}\",\n                 \"Next\": \"IsComplete\"\
          \n               },\n               \"IsComplete\": {\n                \
          \   \"Type\": \"Choice\",\n                   \"Choices\": [\n         \
          \            {\n                       \"Variable\": \"$.isDone\",\n   \
          \                    \"BooleanEquals\": true,\n                       \"\
          Next\": \"EndChoice\"\n                     }\n                   ],\n \
          \                  \"Default\": \"Wait\"\n                 },\n        \
          \       \"Wait\": {\n                 \"Type\": \"Wait\",\n            \
          \     \"Seconds\": 30,\n                 \"Next\": \"CheckStatus\"\n   \
          \            },\n               \"EndChoice\": {\n                 \"Type\"\
          : \"Pass\",\n                 \"End\": true\n               }\n        \
          \     }\n           },\n           \"ResultPath\": \"$.results\",\n    \
          \       \"Next\": \"SendSimSummary\",\n           \"Catch\": [ {\n     \
          \        \"ErrorEquals\": [\"States.ALL\"],\n             \"Next\": \"ErrorLaunchingSimulations\"\
          ,\n             \"ResultPath\": \"$.error\"\n            } ]\n         },\n\
          \         \"SendSimSummary\": {\n           \"Type\": \"Task\",\n      \
          \     \"InputPath\": \"$\",\n           \"Resource\": \"${SendSimSummaryFunction.Arn}\"\
          ,\n           \"ResultPath\": \"$.summary\",\n           \"Catch\": [ {\n\
          \             \"ErrorEquals\": [\"States.ALL\"],\n             \"Next\"\
          : \"ErrorLaunchingSimulations\",\n             \"ResultPath\": \"$.error\"\
          \n            } ],\n           \"End\": true\n         },\n         \"ErrorLaunchingSimulations\"\
          : {\n            \"Type\": \"Task\",\n            \"InputPath\": \"$\",\n\
          \            \"Resource\": \"${ErrorLaunchingSimulationsFunction.Arn}\"\
          ,\n            \"ResultPath\": \"$.error\",\n            \"End\": true\n\
          \         }\n     }\n }"
      RoleArn:
        Fn::GetAtt:
        - StepFunctionsLambda
        - Arn
      StateMachineName:
        Fn::Sub: SimulationRunnerStateMachine-${AWS::StackName}
Outputs:
  ProcessInputFunction:
    Description: Process Input Function ARN
    Value:
      Fn::GetAtt:
      - ProcessInputFunction
      - Arn
  CheckStatusFunction:
    Description: CheckStatus Function ARN
    Value:
      Fn::GetAtt:
      - CheckStatusFunction
      - Arn
  LaunchSimulationFunction:
    Description: LaunchSimulation Function ARN
    Value:
      Fn::GetAtt:
      - LaunchSimulationFunction
      - Arn
  SendSimSummaryFunction:
    Description: SendSimSummary Function ARN
    Value:
      Fn::GetAtt:
      - SendSimSummaryFunction
      - Arn
